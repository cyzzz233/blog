{"version":3,"sources":["webpack:///./src/components/posts/post-entry.tsx","webpack:///./src/components/posts/index.tsx","webpack:///./src/pages/index.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/avatar.tsx","webpack:///./src/components/layout/header.tsx","webpack:///./src/components/layout/index.tsx","webpack:///./src/utils/post.ts","webpack:///./src/components/seo.tsx"],"names":["PostEntry","_ref","path","title","_date$split","date","split","month","day","Object","core_browser_esm","Entry","PostDate","PostDay","PostTitle","gatsby_browser_entry","to","styled_base_browser_esm","target","name","styles","Posts","query","postsQuery","render","data","posts","allMdx","edges","map","edge","objectSpread_default","node","frontmatter","yearPosts","sortPostsBySameYear","thisYear","Date","getFullYear","yearPost","key","year","post","j","extends_default","fields","slug","_1650429877","IndexPage","layout","seo","StaticQueryContext","React","createContext","StaticQuery","props","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","Consumer","staticQueryData","children","graphql","Error","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","createElement","InternalPageRenderer","_babel_runtime_helpers_objectSpread__WEBPACK_IMPORTED_MODULE_0___default","json","shape","Avatar","gatsby_image_default","a","fluid","placeholderImage","childImageSharp","css","_1006920718","Header","_ref3","_ref3$title","header_ref","header_ref2","avatar","_ref4","_ref5","Layout","_ref2","className","header","site","siteMetadata","layout_ref","_755544856","normalizePost","_babel_runtime_helpers_objectSpread__WEBPACK_IMPORTED_MODULE_2___default","sort","b","getTime","reduce","prev","find","p","push","SEO","description","lang","_ref$meta","meta","_ref$keywords","keywords","gatsby__WEBPACK_IMPORTED_MODULE_5__","detailsQuery","metaDescription","react_helmet__WEBPACK_IMPORTED_MODULE_4___default","htmlAttributes","titleTemplate","content","property","author","concat","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_1__","defaultProps","array","arrayOf"],"mappings":"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","file":"component---src-pages-index-tsx-c246d22ec8b66360a255.js","sourcesContent":["import React from 'react'\nimport styled from '@emotion/styled'\nimport { css } from '@emotion/core'\nimport { Link } from 'gatsby'\n\ninterface IPostEntry {\n  path: string\n  title: string\n  date: string\n}\n\nexport default function PostEntry({ path, title, date }: IPostEntry) {\n  const [month, day] = date.split(' ')\n\n  return (\n    <Entry>\n      <PostDate>\n        <PostDay>{day}</PostDay>\n        <small>{month}</small>\n      </PostDate>\n\n      <PostTitle>\n        <Link to={path}>{title}</Link>\n      </PostTitle>\n    </Entry>\n  )\n}\n\nconst Entry = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 10px 0;\n\n  &:first-of-type {\n    margin-top: 0;\n  }\n\n  &:nth-of-type(6n) {\n    margin-top: 1.5em;\n  }\n`\n\nconst PostDate = styled.div`\n  text-align: center;\n  letter-spacing: .5px;\n  margin-right: .4em;\n  width: 50px;\n  margin-right: 10px;\n  opacity: 0.7;\n\n  @media (min-width: 768px) {\n    margin-right: 20px;\n  }\n`\n\nconst PostDay = styled.span`\n  text-align: right;\n  margin-right: 0.2em;\n`\n\nconst PostTitle = styled.div`\n  flex: 5;\n  min-width: 0;\n  margin: 0;\n  background: linear-gradient(to bottom, #f4f4f4, #f6f6f6);\n  text-transform: capitalize;\n  line-height: 1.2;\n  font-weight: bold;\n\n  & a {\n    display: block;\n    color: inherit;\n    text-decoration: none;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    padding: .4em;\n    height: 100%;\n    width: 100%;\n    font-family: Cursive;\n  }\n`","import React from 'react'\nimport { graphql, StaticQuery, Link } from 'gatsby'\nimport { sortPostsBySameYear, Post } from '../../utils/post'\nimport styled from '@emotion/styled'\nimport { css } from '@emotion/core'\nimport PostEntry from './post-entry'\n\nexport default function Posts() {\n  return (\n    <StaticQuery\n      query={postsQuery}\n      render={data => {\n        const posts: Post[] = data.allMdx.edges.map((edge: { node: any }) => {\n          return {\n            ...edge.node,\n            ...edge.node.frontmatter,\n          }\n        })\n        const yearPosts = sortPostsBySameYear(posts)\n        const thisYear = new Date().getFullYear()\n\n        return yearPosts.map(yearPost => (\n          <div key={yearPost.year}>\n            {thisYear !== yearPost.year && <h2>{yearPost.year}</h2>}\n\n            {yearPost.posts.map((post, j) => (\n              <PostEntry key={j} {...post} path={`/posts${post.fields.slug}`} />\n            ))}\n          </div>\n        ))\n      }}\n    />\n  )\n}\n\nconst postsQuery = graphql`\n  {\n    allMdx(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: { frontmatter: { draft: { ne: true } } }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            date(formatString: \"MMM DD, YYYY\")\n            draft\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport Posts from '../components/posts'\n\nexport default function IndexPage() {\n  return (\n    <Layout>\n      <SEO title=\"blog\" />\n      <Posts />\n    </Layout>\n  )\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport { StaticQuery, graphql } from 'gatsby'\nimport Img from 'gatsby-image'\nimport { css } from '@emotion/core'\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `StaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.app/gatsby-image\n * - `StaticQuery`: https://gatsby.app/staticquery\n */\n\nconst Avatar = () => (\n  <StaticQuery\n    query={graphql`\n      query {\n        placeholderImage: file(relativePath: { eq: \"avatar.png\" }) {\n          childImageSharp {\n            fluid(maxWidth: 512, maxHeight: 512) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    `}\n    render={data => (\n      <Img\n        fluid={data.placeholderImage.childImageSharp.fluid}\n        css={css`\n          width: 30px;\n          height: 30px;\n          border-radius: 50%;\n          border: 2px solid #fff;\n          margin-right: 10px;\n        `}\n      />\n    )}\n  />\n)\nexport default Avatar\n","import { Link } from 'gatsby'\nimport React from 'react'\nimport Avatar from '../avatar'\nimport { css } from '@emotion/core'\n\ninterface HeaderProps {\n  title: string\n}\n\nconst Header = ({ title = '' }: HeaderProps) => (\n  <div\n    css={css`\n      height: 44px;\n      line-height: 44px;\n      padding: 0 25px;\n      background: #fafafa;\n      \n      @media (min-width: 768px) {\n        height: 60px;\n        line-height: 60px;\n      }\n    `}\n  >\n    <header\n      css={css`\n        display: flex;\n        align-items: center;\n      `}\n    >\n      <Avatar />\n\n      <h1 css={{ margin: 0, fontSize: '1.1rem' }}>\n        <Link to=\"/\" css={{ color: '#41464b' }}>\n          {title}\n        </Link>\n      </h1>\n    </header>\n  </div>\n)\n\nexport default Header\n","import React from 'react'\nimport { StaticQuery, graphql } from 'gatsby'\nimport { css } from '@emotion/core'\n\nimport Header from './header'\nimport './index.css'\n\nconst Layout = ({ children }: { children: React.ReactNode }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <div className=\"container\">\n        <Header title={data.site.siteMetadata.title} />\n\n        <div\n          css={css`\n            padding: 25px;\n            flex: 1;\n            box-shadow: 0 1px 6px #e5e5e5;\n            -webkit-overflow-scrolling: 'touch';\n\n            @media (min-width: 768px) {\n              padding: 50px;\n            }\n          `}\n        >\n          {children}\n        </div>\n      </div>\n    )}\n  />\n)\n\nexport default Layout\n","export interface Post {\n  title: string\n  date: string\n  draft: boolean\n  fields: {\n    slug: string\n  }\n  excerpt: string\n  code: {\n    scope: string\n    body: string\n  }\n}\n\nexport interface PostUnnormalized {\n  frontmatter: {\n    title: string\n    date: string\n    draft: boolean\n  }\n  fields: {\n    slug: string\n  }\n  excerpt: string\n  code: {\n    scope: string\n    body: string\n  }\n}\n\nexport interface YearPort {\n  year: number\n  posts: Post[]\n}\n\nexport function normalizePost(post: PostUnnormalized) {\n  return {\n    ...post,\n    ...post.frontmatter,\n  }\n}\n\nexport function sortPostsBySameYear(posts: Post[] = []): YearPort[] {\n  return posts\n    .sort((a, b) => {\n      const compare = new Date(b.date).getTime() - new Date(a.date).getTime()\n      return compare\n    }) \n    .reduce((prev: YearPort[], post: Post) => {\n      const year: number = new Date(post.date).getFullYear()\n      const yearPosts = prev.find(p => p.year === year)\n      !yearPosts\n        ? prev.push({ year, posts: [post] })\n        : yearPosts.posts.push(post)\n\n      return prev\n    }, [])\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nfunction SEO({\n  description,\n  lang,\n  meta = [],\n  keywords = [],\n  title,\n}: {\n  description?: string\n  lang?: string\n  meta?: any[]\n  keywords?: string[]\n  title: string\n}) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: 'description',\n                content: metaDescription,\n              },\n              {\n                property: 'og:title',\n                content: title,\n              },\n              {\n                property: 'og:description',\n                content: metaDescription,\n              },\n              {\n                property: 'og:type',\n                content: 'website',\n              },\n              {\n                name: 'twitter:card',\n                content: 'summary',\n              },\n              {\n                name: 'twitter:creator',\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: 'twitter:title',\n                content: title,\n              },\n              {\n                name: 'twitter:description',\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: 'keywords',\n                      content: keywords.join(', '),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: 'en',\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n"],"sourceRoot":""}